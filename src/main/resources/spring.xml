<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
         http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--连接池对象-->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
                                                                       destroy-method="close">
          <property name="url" value="${jdbc.url}" />
          <property name="username" value="${jdbc.username}" />
          <property name="password" value="${jdbc.password}"/>
          <property name="maxActive" value="${jdbc.max}"/>
    </bean>
<!--    创建sqlSession对象，需要连接池对象和mybatis配置文件-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
          <property name="dataSource" ref="myDataSource"/>
          <property name="configLocation" value="classpath:myBatis.xml"/>
    </bean>
<!--    创建dao对象,需要sqlSession对象和dao接口所在的包-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.tangheng.dao"/>
    </bean>

    <bean id="service" class="com.tangheng.service.impl.ServiceImpl">
        <property name="bookMapper" ref="bookMapper" />
<!--        这里原类中声明dao属性的时候只能用set方法-->
    </bean>
<!--    第二种方法--><!--    <context:component-scan base-package="com.tangheng.service" />-->

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>
    </bean>
<!--    告诉spring使用注解管理事务，第一种注释声明-->
<!--    <tx:annotation-driven transaction-manager="transactionManager" />-->

    <!--    告诉spring管理事务，使用第二种aspectj框架声明-->
<!--    <tx:advice id="myAdvice" transaction-manager="transactionManager">-->
<!--        <tx:attributes>-->
<!--            <tx:method name="buy" propagation="REQUIRED" isolation="DEFAULT"-->
<!--            rollback-for="java.lang.NullPointerException,com.tangheng.excep.NotEnoughException" />-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->

<!--&lt;!&ndash;配置增强器，告诉spring 在哪个类 中的指定方法上添加事务&ndash;&gt;  aop事务支持-->
<!--    <aop:config>-->
<!--        <aop:pointcut id="servicePo" expression="execution(* *..service..*.*(..))"/>-->
<!--        <aop:advisor advice-ref="myAdvice" pointcut-ref="servicePo" />-->
<!--    </aop:config>-->
    <!--    <aop></aop>  xmlns后面将context换成aop-->
</beans>